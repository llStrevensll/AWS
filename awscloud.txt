---
VPC
#!/bin/bash
# Install Apache Web Server and PHP
yum install -y httpd mysql php

# Download Lab files
wget https://aws-tc-largeobjects.s3.amazonaws.com/AWS-TC-AcademyACF/acf-lab3-vpc/lab-app.zip
unzip lab-app.zip -d /var/www/html/

# Turn on web server
chkconfig httpd on
service httpd start

====
EC2
#!/bin/bash

yum -y install httpd

systemctl enable httpd

systemctl start httpd

echo '<html><h1>Hello From Your Web Server!</h1></html>' > /var/www/html/index.html

====
Click the Monitoring tab.
--
In the Actions menu, select Monitor and troubleshoot Get System Log.

======
VPC - LAB
=====
Task 1: Create Your VPC
=====
Click Launch VPC Wizard

In the left navigation pane, click VPC with Public and Private Subnets (the second option).

Click Select then configure:

    VPC name: Lab VPC
    Availability Zone: Select the first Availability Zone
    Public subnet name: Public Subnet 1
    Availability Zone: Select the first Availability Zone (the same as used above)
    Private subnet name: Private Subnet 1
    Elastic IP Allocation ID: Click in the box and select the displayed IP address

create vpc

//
The Public Subnet has a CIDR of 10.0.0.0/24, which means that it contains all IP addresses starting with 10.0.0.x.

The Private Subnet has a CIDR of 10.0.1.0/24, which means that it contains all IP addresses starting with 10.0.1.x.

=====
Task 2: Create Additional Subnets
=====

In the left navigation pane, click Subnets.

First, you will create a second Public Subnet.

Click Create subnet then configure:

    VPC ID: Lab VPC
    Subnet name: Public Subnet 2
    Availability Zone: Select the second Availability Zone
    IPv4 CIDR block: 10.0.2.0/24

The subnet will have all IP addresses starting with 10.0.2.x.

Click Create subnet

You will now create a second Private Subnet.

Click Create subnet then configure:

    VPC ID: Lab VPC
    Subnet name: Private Subnet 2
    Availability Zone: Select the second Availability Zone
    CIDR block: 10.0.3.0/24

The subnet will have all IP addresses starting with 10.0.3.x.

Click Create subnet

You will now configure the Private Subnets to route internet-bound traffic to the NAT Gateway so that resources in the Private Subnet are able to connect to the Internet, while still keeping the resources private. This is done by configuring a Route Table.

A route table contains a set of rules, called routes, that are used to determine where network traffic is directed. Each subnet in a VPC must be associated with a route table; the route table controls routing for the subnet.

--
In the left navigation pane, click Route Tables.

Select the route table with Main = Yes and VPC = Lab VPC. (Expand the VPC ID column if necessary to view the VPC name.)

In the lower pane, click the Routes tab.

Note that Destination 0.0.0.0/0 is set to Target nat-xxxxxxxx. This means that traffic destined for the internet (0.0.0.0/0) will be sent to the NAT Gateway. The NAT Gateway will then forward the traffic to the internet.

This route table is therefore being used to route traffic from Private Subnets. 
You will now add a name to the Route Table to make this easier to recognize in future.

In the Name column for this route table, click the pencil then type Private Route Table and click Save

In the lower pane, click the Subnet Associations tab.

---
You will now associate this route table to the Private Subnets.

Click Edit subnet associations

Select both Private Subnet 1 and Private Subnet 2.

You can expand the Subnet ID column to view the Subnet names.

Click Save associations

You will now configure the Route Table that is used by the Public Subnets.

Select the route table with Main = No and VPC = Lab VPC (and deselect any other subnets).

.....
In the Name column for this route table, click the pencil then type Public Route Table, and click Save

In the lower pane, click the Routes tab.

Note that Destination 0.0.0.0/0 is set to Target igw-xxxxxxxx, which is the Internet Gateway. This means that internet-bound traffic will be sent straight to the internet via the Internet Gateway.

You will now associate this route table to the Public Subnets.

Click the Subnet Associations tab.

Click Edit subnet associations

Select both Public Subnet 1 and Public Subnet 2.

Click Save associations


=====
Task 3: Create a VPC Security Group
=====
In this task, you will create a VPC security group, which acts as a virtual firewall. When you launch an instance, you associate one or more security groups with the instance. You can add rules to each security group that allow traffic to or from its associated instances.

    In the left navigation pane, click Security Groups.

    Click Create security group and then configure:
        Security group name: Web Security Group
        Description: Enable HTTP access
        VPC: Lab VPC

    In the Inbound rules pane, choose Add rule

    Configure the following settings:
        Type: HTTP
        Source: Anywhere
        Description: Permit web requests

    Scroll to the bottom of the page and choose Create security group

    You will use this security group in the next task when launching an Amazon EC2 instance.


=====
Task 4: Launch a Web Server Instance
=====
In this task, you will launch an Amazon EC2 instance into the new VPC. You will configure the instance to act as a web server.

    On the Services menu, click EC2.

    Click Launch Instance, and then choose Launch Instance

    First, you will select an Amazon Machine Image (AMI), which contains the desired Operating System.

    In the row for Amazon Linux 2 (at the top), click Select

    The Instance Type defines the hardware resources assigned to the instance.

    Select t2.micro (shown in the Type column).

    Click Next: Configure Instance Details

    You will now configure the instance to launch in a Public Subnet of the new VPC.

    Configure these settings:
        Network: Lab VPC
        Subnet: Public Subnet 2 (not Private!)
        Auto-assign Public IP: Enable

    Expand the Advanced Details section (at the bottom of the page).

    Copy and paste this code into the User data box:

    #!/bin/bash
    # Install Apache Web Server and PHP
    yum install -y httpd mysql php

    # Download Lab files
    wget https://aws-tc-largeobjects.s3.amazonaws.com/AWS-TC-AcademyACF/acf-lab3-vpc/lab-app.zip
    unzip lab-app.zip -d /var/www/html/

    # Turn on web server

    chkconfig httpd on
    service httpd start


    This script will be run automatically when the instance launches for the first time. The script loads and configures a PHP web application.

    Click Next: Add Storage

    You will use the default settings for storage.

    Click Next: Add Tags

    Tags can be used to identify resources. You will use a tag to assign a Name to the instance.

    Click Add Tag then configure:
        Key: Name
        Value: Web Server 1

    Click Next: Configure Security Group

    You will configure the instance to use the Web Security Group that you created earlier.

    Select Select an existing security group

    Select Web Security Group.

    This is the security group you created in the previous task. It will permit HTTP access to the instance.

    Click Review and Launch

    When prompted with a warning that you will not be able to connect to the instance through port 22, click Continue

    Review the instance information and click Launch

    In the Select an existing keypair dialog, select I acknowledge....

    Click Launch Instances and then click View Instances

    Wait until Web Server 1 shows 2/2 checks passed in the Status Checks column.

    This may take a few minutes. Click refresh in the top-right every 30 seconds for updates.

    You will now connect to the web server running on the EC2 instance.

    Copy the Public DNS (IPv4) value shown in the Description tab at the bottom of the page.

    Open a new web browser tab, paste the Public DNS value and press Enter.

    You should see a web page displaying the AWS logo and instance meta-data values.