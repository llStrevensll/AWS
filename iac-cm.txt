CloudFormation

https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-template-resource-type-ref.html
=======
Parameters
Can be controlled by all these settings:

*Type:
  - String
  - Number
  - CommaDelimitedList
  - List<Type>
  - AWS Parameter (to help catch invalid values - 
                   match against existing values in the AWS Account)
*Description
*Constraints
*ConstraintsDescription (String)
*Min/MaxLength
*Min/MaxValue
*Defaults
*AllowedValues (array)
*AllowedPattern (regexp)
*NoEcho (Boolean)

The Fn::Ref function can be leveraged to reference parameters
!Ref


Concept:Pseudo Parameters
Reference Value                   ExampleReturn Value
AWS::AccountId			     12345677890
AWS::NotificationARNs		     [arn:aws:sns:us-east-1:123456789012:MyTopic]
AWS::NoValue			     Does not return a value
AWS::Region			     us-east-1
AWS::StackId			     arn:aws:cloudformation:us-east-1:1234567890:stack/MyStack/1c2fa620-982a-11e3-aff7-50e2416294e0
AWS::StackName			     MyStack

========
Resources
They represents the different AWS Components that will be created and configured
Resources are declared and can reference each other
AWS figures out creation, updates and deletes of resources for us

There are over 224 type of resources
https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-ec2-instance.html

========
Mappings
Mapings are fixed variables within your CloudFormation Template
different evironments (dev,qa,prod), regions, AMIType

Mappings:
  Mapping01:
    Key01:
      Name: Value01
    Key02:
      Name: Value02
    Key02:
      Name: Value02

RegionMap:
  us-east-1:
    "32": "ami-6411e20d"
    "64": "ami-7a11e213"
  us-west-1:
    "32": "ami-6411e20d"
    "64": "ami-7a11e213"
  eu-east-1:
    "32": "ami-6411e20d"
    "64": "ami-7a11e213"

Accessing Mapping Values
we use Fn::FindInMap to return a named value from a specific key
!FindInMap [MapName, TopLevelKey, SecondLevelKey ]

AWSTemplateFormatVersion: "0202-02-10"
Mappings:
  RegionMap:
    us-east-1:
      "32": "ami-6411e20d"
      "64": "ami-7a11e213"
    us-west-1:
      "32": "ami-6411e20d"
      "64": "ami-7a11e213"
    eu-east-1:
      "32": "ami-6411e20d"
      "64": "ami-7a11e213"
Resources:
  myEC2Instance:
    Type: "AWS::EC2::Instance"
    Properties:
      ImageId: !FindInMap [RegionMap, !Ref "AWS::Region", 32]
      IntanceType: m1.small



