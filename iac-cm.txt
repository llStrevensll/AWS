Errors with security group in default Vpc
https://stackoverflow.com/questions/67893072/cloud-formation-failed-to-create-security-group-with-vpcidnotspecified
https://stackoverflow.com/questions/65215905/how-to-use-existing-vpc-in-aws-cloudformation-template-for-new-securitygroup
https://stackoverflow.com/questions/56676108/cloudformation-throws-value-for-parameter-groupid-is-invalid-the-value-cann

"SecurityGroupIds" : [ 
              { "Fn::GetAtt" : [ "InstanceSecurityGroup", "GroupId" ] }
            ]

SecurityGroupIds:
        - !GetAtt 'InstanceSecurityGroup.GroupId'


"SecurityGroupIds": [
                    {
                        "Fn::GetAtt": [
                            "InstanceSecurityGroup",
                            "GroupId"
                        ]
                    }
                ]


SecurityGroupIds:
        - !GetAtt 
          - InstanceSecurityGroup
          - GroupId

==========
AWS Educate Accounts come with following restrictions on services:
IAM: You can create users, but cannot attach a login profile. You are not permitted to use SAML or third party providers with IAM. You cannot create access keys for additional users.
EC2: Creation of VPN gateways, VPN links, NAT gateways and Inspector is not permitted.
EC2 and RDS: Reserved Instance Purchases are not permitted.
EC2 supported instances types: Starter accounts are limited to “t2.small”, “t2.micro”, “t2.medium”, “c5.large”, “m5.large”. If additional instance types are desired, please ask your educator to request a Classroom. Certain instance types may not be available in Classrooms
RDS supported instance typesL "db.t2.small", "db.m1.small", "db.t2.medium"
Route53: Domain name registration not supported.
==========
vscode
https://stackoverflow.com/questions/53470329/aws-sam-yaml-template-unknown-tag-ref
unknow tag
 Redhat yaml - extension 


=====
Basic Concepts
Template: Describe resources and the interaction between these
Stack: Manage resources define for the template as one unit
       A stack is created since a template
       You can create, update and delete resources of the stack or the complete stack


Resource Structure:

Resources:
  Logical ID:
    Type: Resource type
    Properties:
      Set of properties

Output Structure:

Outputs:
  Logical ID:
    Description: Information about the value
    Value: Value to return
    Export:
      Name: Value to export  #Usado por otros stacks para obtener el valor

---
Metadata
AWS::CloudFormation::Init       -Define la configuración de tareas para cfn-init
AWS::CloudFormation::Interface  -Define el orden de parametros de entrada cuando se muestra en la consola
AWS::CloudFormation::Designer   -Describe como se presentan los recursos en cloudformation designer
---
User Data
With user-data script -> replace update
With init -> in-place update


https://docs.aws.amazon.com/es_es/AWSEC2/latest/UserGuide/user-data.html
http://ec2-3-85-36-79.compute-1.amazonaws.com/phpinfo.php

 view logs
 /var/log/cloud-init-output.log

--
CloudFormation helper scripts
4 type scripts
*cfn-init:
    Obtain and analyze metadata of AWS CloudFormation
    Install packages
    Write files in the disk
    Enable/Disable and start/stop services

*cfn-signal
    Send a signal to CloudFormation for indicate if this was created or 
    updated correctly in an instance EC2

*cfn-get-metadata:
    It allows recovery a block of a metadata of AWS CloudFormation and print in a standard output

*cfn-hup:
    It is a deamon that can detect changes in the resources of metadata and 
    execute specific actions for the user when it detects a change

CloudFormation Init
Packages: Install a packages list
Groups : Define user groups
Users:  Define users and groups to which it belongs
Sources: Download a file and put it in an ec2 instance
Files:  Create a file in an ec2 instance
Commands:  Execute a series of commands
Services: Launch a list of sysvinit

Function Fn::Sub
!Sub Substitute variables in an input chain for the values that you specify
In the templates is used to build commands that include values that not are available until the create or update the stack
The value need to have the next format ${VariableName} so it can be substituted

=====
CloudFormation

https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-template-resource-type-ref.html
=======
Parameters
Can be controlled by all these settings:

*Type:
  - String
  - Number
  - CommaDelimitedList
  - List<Type>
  - AWS Parameter (to help catch invalid values - 
                   match against existing values in the AWS Account)
*Description
*Constraints
*ConstraintsDescription (String)
*Min/MaxLength
*Min/MaxValue
*Defaults
*AllowedValues (array)
*AllowedPattern (regexp)
*NoEcho (Boolean)

The Fn::Ref function can be leveraged to reference parameters
!Ref


Concept:Pseudo Parameters
Reference Value                   ExampleReturn Value
AWS::AccountId			     12345677890
AWS::NotificationARNs		     [arn:aws:sns:us-east-1:123456789012:MyTopic]
AWS::NoValue			     Does not return a value
AWS::Region			     us-east-1
AWS::StackId			     arn:aws:cloudformation:us-east-1:1234567890:stack/MyStack/1c2fa620-982a-11e3-aff7-50e2416294e0
AWS::StackName			     MyStack

========
Resources
They represents the different AWS Components that will be created and configured
Resources are declared and can reference each other
AWS figures out creation, updates and deletes of resources for us

There are over 224 type of resources
https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-ec2-instance.html

========
Mappings
Mapings are fixed variables within your CloudFormation Template
different evironments (dev,qa,prod), regions, AMIType

Mappings:
  Mapping01:
    Key01:
      Name: Value01
    Key02:
      Name: Value02
    Key02:
      Name: Value02

RegionMap:
  us-east-1:
    "32": "ami-6411e20d"
    "64": "ami-7a11e213"
  us-west-1:
    "32": "ami-6411e20d"
    "64": "ami-7a11e213"
  eu-east-1:
    "32": "ami-6411e20d"
    "64": "ami-7a11e213"

Accessing Mapping Values
we use Fn::FindInMap to return a named value from a specific key
!FindInMap [MapName, TopLevelKey, SecondLevelKey ]

AWSTemplateFormatVersion: "0202-02-10"
Mappings:
  RegionMap:
    us-east-1:
      "32": "ami-6411e20d"
      "64": "ami-7a11e213"
    us-west-1:
      "32": "ami-6411e2o0d"
      "64": "ami-7a11e213"
    eu-east-1:
      "32": "ami-6411e20d"
      "64": "ami-7a11e213"
Resources:
  myEC2Instance:
    Type: "AWS::EC2::Instance"
    Properties:
      ImageId: !FindInMap [RegionMap, !Ref "AWS::Region", 32]
      IntanceType: m1.small
=========

Outputs
The Outputs section declares optional outputs values that we can import into other stacks
(if you export them first)
View the outputs in the AWS Console or in using the AWS CLI

Outputs:
  StackSSHSecurityGroup:
    Description: The SSH Security Group for our COmpany
    Value: !Ref MyCompanyWideSSHSecurityGroup
    Export:
      Name: SSHSecurityGroup


Resources:
  MySecureInstance:
    Type: AWS::EC2::Instance
    Properties:
      AvailabilityZone: us-east-1a
      ImageId: ami-a4c7ebd2
      InstanceType: t2.micro
      SecurityGroups:
	- !ImportValue SSHSecurityGroup


==================
Conditions
The logical ID is for you to choose It's how you name condition
The instrinsic function(logical) can be any of the following:
Fn::And
Fn::Equals
Fn::If
Fn::Not
Fn::Or


Conditions:
  CreateProdResources: !Equals [ !Ref EnvType, prod ]

Resources:
  MountPoint:
    Type: "AWS::EC2::VolumeAttachment"
    Condition: CreateProdResources

====================
Go to return values
https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-ec2-instance.html

Intrinsic Functions

Fn::Ref function can be leveraged to reference
  *Parameters => returns the value of the parameter
  *Resources => returns the physical ID of the underlying resorce (ex: EC2 ID)

DbSubnet1:
  Type: AWS::EC2::Subnet
  Properties:
    VpcId: !Ref MyVPC

Fn::GetAtt
Attributes are attached to any resources you create

Resources:
  EC2Instance:
    Type: "AWS::EC2::Instance"
    Properties:
      ImageId: ami-1234567
      InstanceType: t2.micro

  NewVolume:
    Type: "AWS::EC2::Volume"
    Condition: CreateProdResources
    Properties:
      Size: 100
      AvailabilityZone:
        !GetAtt EC2Instance.AvailabilityZone

Fn::FindInMap
!FindInMap [MapName, TopLvelKey, SecondLevelKey]

   ImageId: !FindInMap [RegionMap, !Ref"AWS::Region", 32]


Fn::ImportValue
Import values that are exported in other templates

Resources:
  MySecureInstance:
    Type: "AWS::EC2::Instance"
    Properties:
      AvailabilityZone: us-east-1a
      ImageId: ami-1234567
      InstanceType: t2.micro
      SecurityGroups:
        - !ImportValue SSHSecurityGroup


Fn::Join
!Join [ delimeter, [comma-delimited lsit of values ] ]
!Join [ ":", [ a, b, c] ]    -  "a:b:c"

Fn::Sub
!Sub as a shorthand, is used to substitute variables from a text
String must contain ${VariableName} and will substitute them
!Sub
  - String
  - { Var1Name: Var1Value, Var2Name: Var2Value }


Condition Functions (Fn::If, Fn::Not, Fn::Equals,..)
Fn::And
Fn::Equals
Fn::If
Fn::Not
Fn::Or

========
User Data in EC2 for CloudFormation
We can have user data at EC2 instance launch through the console
The important thing to pass is the entire script through the function Fn:Base64

UserData: 
        Fn::Base64: |
          #!/bin/bash -xe
          yum update -y
          yum install -y httpd
          systemctl start httpd
          systemctl enable httpd
          echo "Hello World from user data" > /var/www/html/index.html

into ec2 instance
cat /var/log/cloud-init-output.log

========
cfn-init
https://docs.aws.amazon.com/es_es/AWSCloudFormation/latest/UserGuide/cfn-init.html
AWS::CloudFormation::Init must be in the Metadata of a resource

UserData: 
        Fn::Base64:
          !Sub |
            #!/bin/bash -xe
            # Get the latest CloudFormation package
            yum update -y aws-cfn-bootstrap
            # Start cfn-init
            /opt/aws/bin/cfn-init -s ${AWS::StackId} -r MyInstance --region ${AWS::Region} || error_exit 'Failed to run cfn-init'
    Metadata:
      Comment: Install a simple Apache HTTP page
      AWS::CloudFormation::Init:
        config:
          packages:
            yum:
              httpd: []
          files:
            "/var/www/html/index.html":
              content: |
                <h1>Hello World from EC2 instance!</h1>
                <p>This was created using cfn-init</p>
              mode: '000644'
          commands:
            hello:
              command: "echo 'hello world'"
          services:
            sysvinit:
              httpd:
                enabled: 'true'
                ensureRunning: 'true'

cat var/log/cfn-init.log
cat var/log/cfn-init-cmd.log
============
cfn-signal - wait conditions
https://docs.aws.amazon.com/es_es/AWSCloudFormation/latest/UserGuide/cfn-signal.html

Fn::Base64:
          !Sub |
            #!/bin/bash -xe
            # Get the latest CloudFormation package
            yum update -y aws-cfn-bootstrap
            # Start cfn-init
            /opt/aws/bin/cfn-init -s ${AWS::StackId} -r MyInstance --region ${AWS::Region}
            # Start cfn-signal to the wait condition
            /opt/aws/bin/cfn-signal -e $? --stack ${AWS::StackId} --resource SampleWaitCondition --region ${AWS::Region}

SampleWaitCondition:
    CreationPolicy:
      ResourceSignal:
        Timeout: PT2M  #2minutes
        Count: 1       #1 instance
    Type: AWS::CloudFormation::WaitCondition

------
Stack creation options
  Rollback on failure
  *Disabled
------
Nested stacks
Nested stacks are stacks created as part of other stacks. You create a nested stack within another stack by using the AWS::CloudFormation::Stack resource.
https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/using-cfn-nested-stacks.html

------
Change sets
When you need to update a stack, understanding how your changes will affect running resources before you implement them can help you update stacks with confidence. 
https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/using-cfn-updating-stacks-changesets.html


create 0-just-ec2.yaml

after create
select stak 
  Actions
     Create change set for current stack
        Replace current template
           Upload a template file
             1-ec2-with-sg-eip.yaml

------
DeletionPolicy=Retain
specify on resource to preserve /backup in case of CloudFormation deletes
to keep a resource, specify Retain (works for any resource / nested stack)

DeletionPolicy=Snapshot
EBS Volume, ElastiCache Cluster, ElastiCache ReplicationGroup
RDS DBInstance, RDS DBCluster, Redshift Cluster

DeletionPolicy=Delete

---
Select stack
 Actions
   Edit temination protection
    Enable

----------
----------
System Manger - Parameter Store
Name: /EC2/Instance/Type
Type: String
Value: t2.micro

-----
public parameter
aws ssm get-parameters-by-path --path /aws/service/ami-amazon-linux-latest  --query 'Parameters[].Name'
aws ssm get-parameters-by-path --path "/aws/service/ami-windows-latest" --region us-east-1

---
DependsOn
DependsOn: MyDB
Create ec2 instance after myDBInstance has been successfully created

----
Lambda

to 13.2-lambda-s3.yml
stack
 Parameters
   S3BucketParam: aws-devops-stre #name bucket
   S3KeyParam: lambda/lambda-function.zip


add version object param into 
13.3-lambda-s3-version.yml


bucket use version id

----
Custom Resource
 LambdaUsedToCleanUp:
    Type: Custom::cleanupbucket
    Properties:
      ServiceToken: !ImportValue EmptyS3BucketLambda
      BucketName: !Ref myBucketResource


----
Drift - detect manual changes in the resources
Stack Actions
  Detect Drift

For the example with security groups when you update de inbound rules, this detects change
                                      but if you update the output rules it doesn't detect the change


----
Stack Policy

Advanced options
   Stack Policy
        Upload a file


===========================
===========================
Elastic Beanstalk
install MANUAL:
https://docs.aws.amazon.com/es_es/elasticbeanstalk/latest/dg/eb-cli3-install-windows.html

install SCRIPT:
https://github.com/aws/aws-elastic-beanstalk-cli-setup


------
Features
Web server environment
   Configuration presents: Low cost (Free Tier eligible)
                           High availability
                           Custom Configuration

Aplication version
  settings 
    Aplication version lifecycle settings:
    Lifecycle Policy
    Lifecycle rule
    Retention
    Service role

Environment
  Clone Environment
  Terminate Environment
  Rebuild Environment: Delete and re create everything it for you

======
Elastic Beanstalk Deployment Modes
All at once (deploy all in one go): fastest, but instances aren't available to server traffic for a bit(downtime)

Rolling: Update a few instances at a time (bucket), and then move onto the next bucket onece the fist bucket is healthy

Rolling with additional batches: like rolling, but spins up new instances to move the batch(so that the old application is still available)

Inmutable: spins up new instances in a new ASG, deploys version to these instances, and then swaps all instances when evertyhing is healthy


--
Modify rolling updates and deployments
Application deployments: All at once, Rolling, Inmutable

Configuration Updates: Rolling based on Health, Rolling based on Time, Inmutable

Deployment preferences: Ignore health check, Healthy threshold(ok, warnning, degraded, servere), Command Timeout



=======
Swap environment URLs
elastic beanstalk
  environment
     Actions -> Swap environment  URLs

With this swap, the people see both version for a little bit of time

=======
Worker environments
So a worker environment is an application that processes long running workloads, such as encoding a video on demand or perform tasks on the schedule.

cron.yaml