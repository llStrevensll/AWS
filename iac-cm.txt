CloudFormation

https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-template-resource-type-ref.html
=======
Parameters
Can be controlled by all these settings:

*Type:
  - String
  - Number
  - CommaDelimitedList
  - List<Type>
  - AWS Parameter (to help catch invalid values - 
                   match against existing values in the AWS Account)
*Description
*Constraints
*ConstraintsDescription (String)
*Min/MaxLength
*Min/MaxValue
*Defaults
*AllowedValues (array)
*AllowedPattern (regexp)
*NoEcho (Boolean)

The Fn::Ref function can be leveraged to reference parameters
!Ref


Concept:Pseudo Parameters
Reference Value                   ExampleReturn Value
AWS::AccountId			     12345677890
AWS::NotificationARNs		     [arn:aws:sns:us-east-1:123456789012:MyTopic]
AWS::NoValue			     Does not return a value
AWS::Region			     us-east-1
AWS::StackId			     arn:aws:cloudformation:us-east-1:1234567890:stack/MyStack/1c2fa620-982a-11e3-aff7-50e2416294e0
AWS::StackName			     MyStack

========
Resources
They represents the different AWS Components that will be created and configured
Resources are declared and can reference each other
AWS figures out creation, updates and deletes of resources for us

There are over 224 type of resources
https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-ec2-instance.html

========
Mappings
Mapings are fixed variables within your CloudFormation Template
different evironments (dev,qa,prod), regions, AMIType

Mappings:
  Mapping01:
    Key01:
      Name: Value01
    Key02:
      Name: Value02
    Key02:
      Name: Value02

RegionMap:
  us-east-1:
    "32": "ami-6411e20d"
    "64": "ami-7a11e213"
  us-west-1:
    "32": "ami-6411e20d"
    "64": "ami-7a11e213"
  eu-east-1:
    "32": "ami-6411e20d"
    "64": "ami-7a11e213"

Accessing Mapping Values
we use Fn::FindInMap to return a named value from a specific key
!FindInMap [MapName, TopLevelKey, SecondLevelKey ]

AWSTemplateFormatVersion: "0202-02-10"
Mappings:
  RegionMap:
    us-east-1:
      "32": "ami-6411e20d"
      "64": "ami-7a11e213"
    us-west-1:
      "32": "ami-6411e2o0d"
      "64": "ami-7a11e213"
    eu-east-1:
      "32": "ami-6411e20d"
      "64": "ami-7a11e213"
Resources:
  myEC2Instance:
    Type: "AWS::EC2::Instance"
    Properties:
      ImageId: !FindInMap [RegionMap, !Ref "AWS::Region", 32]
      IntanceType: m1.small
=========

Outputs
The Outputs section declares optional outputs values that we can import into other stacks
(if you export them first)
View the outputs in the AWS Console or in using the AWS CLI

Outputs:
  StackSSHSecurityGroup:
    Description: The SSH Security Group for our COmpany
    Value: !Ref MyCompanyWideSSHSecurityGroup
    Export:
      Name: SSHSecurityGroup


Resources:
  MySecureInstance:
    Type: AWS::EC2::Instance
    Properties:
      AvailabilityZone: us-east-1a
      ImageId: ami-a4c7ebd2
      InstanceType: t2.micro
      SecurityGroups:
	- !ImportValue SSHSecurityGroup


==================
Conditions
The logical ID is for you to choose It's how you name condition
The instrinsic function(logical) can be any of the following:
Fn::And
Fn::Equals
Fn::If
Fn::Not
Fn::Or


Conditions:
  CreateProdResources: !Equals [ !Ref EnvType, prod ]

Resources:
  MountPoint:
    Type: "AWS::EC2::VolumeAttachment"
    Condition: CreateProdResources

====================
Go to return values
https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-ec2-instance.html

Intrinsic Functions

Fn::Ref function can be leveraged to reference
  *Parameters => returns the value of the parameter
  *Resources => returns the physical ID of the underlying resorce (ex: EC2 ID)

DbSubnet1:
  Type: AWS::EC2::Subnet
  Properties:
    VpcId: !Ref MyVPC

Fn::GetAtt
Attributes are attached to any resources you create

Resources:
  EC2Instance:
    Type: "AWS::EC2::Instance"
    Properties:
      ImageId: ami-1234567
      InstanceType: t2.micro

  NewVolume:
    Type: "AWS::EC2::Volume"
    Condition: CreateProdResources
    Properties:
      Size: 100
      AvailabilityZone:
        !GetAtt EC2Instance.AvailabilityZone

Fn::FindInMap
!FindInMap [MapName, TopLvelKey, SecondLevelKey]

   ImageId: !FindInMap [RegionMap, !Ref"AWS::Region", 32]


Fn::ImportValue
Import values that are exported in other templates

Resources:
  MySecureInstance:
    Type: "AWS::EC2::Instance"
    Properties:
      AvailabilityZone: us-east-1a
      ImageId: ami-1234567
      InstanceType: t2.micro
      SecurityGroups:
        - !ImportValue SSHSecurityGroup


Fn::Join
!Join [ delimeter, [comma-delimited lsit of values ] ]
!Join [ ":", [ a, b, c] ]    -  "a:b:c"

Fn::Sub
!Sub as a shorthand, is used to substitute variables from a text
String must contain ${VariableName} and will substitute them
!Sub
  - String
  - { Var1Name: Var1Value, Var2Name: Var2Value }


Condition Functions (Fn::If, Fn::Not, Fn::Equals,..)
Fn::And
Fn::Equals
Fn::If
Fn::Not
Fn::Or

========
User Dta in EC2 for CloudFormation
We can have user data at EC2 instance launch through the console
The important thing to pass is the entire script through the function Fn:Base64

UserData: 
        Fn::Base64: |
          #!/bin/bash -xe
          yum update -y
          yum install -y httpd
          systemctl start httpd
          systemctl enable httpd
          echo "Hello World from user data" > /var/www/html/index.html

into ec2 instance
cat /var/log/cloud-init-output.log

========
cfn-init
AWS::CloudFormation::Init must be in the Metadata of a resource

UserData: 
        Fn::Base64:
          !Sub |
            #!/bin/bash -xe
            # Get the latest CloudFormation package
            yum update -y aws-cfn-bootstrap
            # Start cfn-init
            /opt/aws/bin/cfn-init -s ${AWS::StackId} -r MyInstance --region ${AWS::Region} || error_exit 'Failed to run cfn-init'
    Metadata:
      Comment: Install a simple Apache HTTP page
      AWS::CloudFormation::Init:
        config:
          packages:
            yum:
              httpd: []
          files:
            "/var/www/html/index.html":
              content: |
                <h1>Hello World from EC2 instance!</h1>
                <p>This was created using cfn-init</p>
              mode: '000644'
          commands:
            hello:
              command: "echo 'hello world'"
          services:
            sysvinit:
              httpd:
                enabled: 'true'
                ensureRunning: 'true'

cat var/log/cfn-init.log
cat var/log/cfn-init-cmd.log
============
cfn-signal - wait conditions

Fn::Base64:
          !Sub |
            #!/bin/bash -xe
            # Get the latest CloudFormation package
            yum update -y aws-cfn-bootstrap
            # Start cfn-init
            /opt/aws/bin/cfn-init -s ${AWS::StackId} -r MyInstance --region ${AWS::Region}
            # Start cfn-signal to the wait condition
            /opt/aws/bin/cfn-signal -e $? --stack ${AWS::StackId} --resource SampleWaitCondition --region ${AWS::Region}

SampleWaitCondition:
    CreationPolicy:
      ResourceSignal:
        Timeout: PT2M
        Count: 1
    Type: AWS::CloudFormation::WaitCondition

